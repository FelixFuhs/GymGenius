name: GymGenius CI

on:
  push:
    branches: [ main, develop ] # Or your primary branches
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Lint webapp
        run: node --check webapp/js/*.js

      - name: Lint engine
        run: |
          pip install -r engine/requirements.txt
          pip install ruff
          ruff engine tests webapp/tests

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint # Optional: run tests only if linting passes
    services: # If tests need a database or other services
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: gymgenius
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: gymgenius_test # Use a separate test DB
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python (for engine tests)
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Add webapp testing steps here (e.g., Jest, Cypress)
      # Example:
      # - name: Setup Node.js for webapp tests
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      # - name: Install webapp dependencies and test
      #   run: |
      #     cd webapp
      #     npm install # or yarn install
      #     npm run test # or yarn test

      # Add engine testing steps here (e.g., pytest, unittest)
      # Example:
      - name: Install dependencies and run tests
        env:
           DATABASE_URL: postgresql://gymgenius:secret@localhost:5432/gymgenius_test
        run: |
          pip install -r engine/requirements.txt
          pip install pytest psycopg2-binary
          pytest webapp/tests tests

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test # Optional: build only if tests pass
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to a Docker registry if you plan to push images
      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build images using docker-compose
        run: |
          docker-compose -f docker-compose.yml build web
          docker-compose -f docker-compose.yml build engine
          # If you have other services defined in docker-compose.yml, build them too.
          # No push step included, as that requires registry setup and credentials.

      - name: Placeholder Docker Build Success
        run: echo "Docker images built (not pushed)."
